install.packages("Seurat")
library(Seurat)
library(SeuratData)
library(Seurat)
library(ggplot2)
library(patchwork)
library(dplyr)
# download the `1-Spatial-Transcriptomics-Quick-Analysis` directory from the github repository and copy/paste the absolute path in the following line. Hint: to get the absolute path, you can navigate to the filtered_feature_bc_matrix folder that you have downloaded using the the "Files" panel in Rstudio then you can press "More" and "copy file path to clipboard"
data_dir <- ('~/Desktop/BEC/1-Spatial-Transcriptomics-Quick-Analysis/Data/filtered_feature_bc_matrix')
slide1 <-Load10X_Spatial(data.dir=data_dir, slice='slide1')
# download the `1-Spatial-Transcriptomics-Quick-Analysis` directory from the github repository and copy/paste the absolute path in the following line. Hint: to get the absolute path, you can navigate to the filtered_feature_bc_matrix folder that you have downloaded using the the "Files" panel in Rstudio then you can press "More" and "copy file path to clipboard"
data_dir <- ('~/Desktop/BEC/1-Spatial-Transcriptomics-Quick-Analysis/Data')
slide1 <-Load10X_Spatial(data.dir=data_dir, slice='slide1')
# download the `1-Spatial-Transcriptomics-Quick-Analysis` directory from the github repository and copy/paste the absolute path in the following line. Hint: to get the absolute path, you can navigate to the filtered_feature_bc_matrix folder that you have downloaded using the the "Files" panel in Rstudio then you can press "More" and "copy file path to clipboard"
data_dir <- ('~/Desktop/BEC/1-Spatial-Transcriptomics-Quick-Analysis/Data')
slide1 <-Load10X_Spatial(data.dir=data_dir, slice='slide1')
# investigate the quality control parameters (RNA counts)
plot1 <- VlnPlot(slide1, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
plot2 <- SpatialFeaturePlot(slide1, features = "nCount_Spatial") + theme(legend.position = "right")
wrap_plots(plot1, plot2)
# perform normalization
slide1<-SCTransform(slide1, assay = "Spatial", verbose = FALSE)
# perform clustering
slide1 <- RunPCA(slide1, assay = "SCT", verbose = FALSE)
slide1 <- FindNeighbors(slide1, reduction = "pca", dims = 1:30)
slide1 <- FindClusters(slide1, verbose = FALSE)
slide1 <- RunUMAP(slide1, reduction = "pca", dims = 1:30)
p1 <- DimPlot(slide1, reduction = "umap", label = TRUE)
p2 <- SpatialDimPlot(slide1, label = TRUE, label.size = 3)
p1 + p2
# download the `1-Spatial-Transcriptomics-Quick-Analysis` directory from the github repository and copy/paste the absolute path in the following line. Hint: to get the absolute path, you can navigate to the filtered_feature_bc_matrix folder that you have downloaded using the the "Files" panel in Rstudio then you can press "More" and "copy file path to clipboard"
data_dir <- ('~/Desktop/BEC/1-Spatial-Transcriptomics-Quick-Analysis/Data')
slide1 <-Load10X_Spatial(data.dir=data_dir, slice='slide1')
# investigate the quality control parameters (RNA counts)
plot1 <- VlnPlot(slide1, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
plot2 <- SpatialFeaturePlot(slide1, features = "nCount_Spatial") + theme(legend.position = "right")
wrap_plots(plot1, plot2)
# perform normalization
slide1<-SCTransform(slide1, assay = "Spatial", verbose = FALSE)
View(slide1)
# perform normalization
slide1<-SCTransform(slide1, assay = "Spatial", verbose = FALSE)
# investigate the quality control parameters (RNA counts)
plot1 <- VlnPlot(slide1, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
plot2 <- SpatialFeaturePlot(slide1, features = "nCount_Spatial") + theme(legend.position = "right")
wrap_plots(plot1, plot2)
# perform normalization
slide1<-NormalizeData(slide1, assay = "Spatial", verbose = FALSE)
# perform clustering
slide1 <- RunPCA(slide1, assay = "SCT", verbose = FALSE)
slide1 <- FindNeighbors(slide1, reduction = "pca", dims = 1:30)
slide1 <- FindClusters(slide1, verbose = FALSE)
slide1 <- RunUMAP(slide1, reduction = "pca", dims = 1:30)
p1 <- DimPlot(slide1, reduction = "umap", label = TRUE)
p2 <- SpatialDimPlot(slide1, label = TRUE, label.size = 3)
p1 + p2
SpatialFeaturePlot(slide1, features = "Hpca", alpha = c(0.1, 1))
SpatialDimPlot(slide1, cells.highlight = CellsByIdentities(object = slide1, idents = c(2, 1, 4, 3,
5, 8)), facet.highlight = TRUE, ncol = 3)
library(Seurat)
library(ggplot2)
library(patchwork)
library(dplyr)
# download the `1-Spatial-Transcriptomics-Quick-Analysis` directory from the github repository and copy/paste the absolute path in the following line. Hint: to get the absolute path, you can navigate to the filtered_feature_bc_matrix folder that you have downloaded using the the "Files" panel in Rstudio then you can press "More" and "copy file path to clipboard"
data_dir <- ('~/Desktop/BEC/1-Spatial-Transcriptomics-Quick-Analysis/Data')
slide1 <-Load10X_Spatial(data.dir=data_dir, slice='slide1')
# investigate the quality control parameters (RNA counts)
plot1 <- VlnPlot(slide1, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
plot2 <- SpatialFeaturePlot(slide1, features = "nCount_Spatial") + theme(legend.position = "right")
wrap_plots(plot1, plot2)
# perform normalization
slide1<-NormalizeData(slide1, assay = "Spatial", verbose = FALSE)
# perform clustering
slide1 <- FindVariableFeatures(slide1)
slide1 <- RunPCA(slide1, assay = "Spatial", verbose = FALSE)
# perform normalization
slide1<-SCTransform(slide1, assay = "Spatial", verbose = FALSE)
# download the `1-Spatial-Transcriptomics-Quick-Analysis` directory from the github repository and copy/paste the absolute path in the following line. Hint: to get the absolute path, you can navigate to the filtered_feature_bc_matrix folder that you have downloaded using the the "Files" panel in Rstudio then you can press "More" and "copy file path to clipboard"
data_dir <- ('~/Desktop/BEC/1-Spatial-Transcriptomics-Quick-Analysis/Data')
slide1 <-Load10X_Spatial(data.dir=data_dir, slice='slide1')
# investigate the quality control parameters (RNA counts)
plot1 <- VlnPlot(slide1, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
plot2 <- SpatialFeaturePlot(slide1, features = "nCount_Spatial") + theme(legend.position = "right")
wrap_plots(plot1, plot2)
# perform normalization
slide1<-NormalizeData(slide1, assay = "Spatial", verbose = FALSE)
# perform clustering
slide1 <- FindVariableFeatures(slide1)
slide1 <- RunPCA(slide1, assay = "Spatial", verbose = FALSE)
slide1<-SCTransform(slide1, assay = "Spatial", verbose = FALSE)
# perform clustering
slide1 <- RunPCA(slide1, assay = "SCT", verbose = FALSE)
# perform clustering
slide1 <- RunPCA(slide1, assay = "SCT", verbose = FALSE)
slide1 <- FindNeighbors(slide1, reduction = "pca", dims = 1:30)
slide1 <- FindClusters(slide1, verbose = FALSE)
slide1 <- RunUMAP(slide1, reduction = "pca", dims = 1:30)
p1 <- DimPlot(slide1, reduction = "umap", label = TRUE)
p2 <- SpatialDimPlot(slide1, label = TRUE, label.size = 3)
p1 + p2
saveRDS(slide1, "slide1.rds")
